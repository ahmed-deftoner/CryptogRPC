// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/binance.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinanceServiceClient is the client API for BinanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinanceServiceClient interface {
	FetchAfterOneHour(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	FetchAfterFourHour(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type binanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinanceServiceClient(cc grpc.ClientConnInterface) BinanceServiceClient {
	return &binanceServiceClient{cc}
}

func (c *binanceServiceClient) FetchAfterOneHour(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/binance_service.BinanceService/FetchAfterOneHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceClient) FetchAfterFourHour(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/binance_service.BinanceService/FetchAfterFourHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinanceServiceServer is the server API for BinanceService service.
// All implementations must embed UnimplementedBinanceServiceServer
// for forward compatibility
type BinanceServiceServer interface {
	FetchAfterOneHour(context.Context, *Request) (*Response, error)
	FetchAfterFourHour(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedBinanceServiceServer()
}

// UnimplementedBinanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBinanceServiceServer struct {
}

func (UnimplementedBinanceServiceServer) FetchAfterOneHour(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAfterOneHour not implemented")
}
func (UnimplementedBinanceServiceServer) FetchAfterFourHour(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAfterFourHour not implemented")
}
func (UnimplementedBinanceServiceServer) mustEmbedUnimplementedBinanceServiceServer() {}

// UnsafeBinanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinanceServiceServer will
// result in compilation errors.
type UnsafeBinanceServiceServer interface {
	mustEmbedUnimplementedBinanceServiceServer()
}

func RegisterBinanceServiceServer(s grpc.ServiceRegistrar, srv BinanceServiceServer) {
	s.RegisterService(&BinanceService_ServiceDesc, srv)
}

func _BinanceService_FetchAfterOneHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServiceServer).FetchAfterOneHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance_service.BinanceService/FetchAfterOneHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServiceServer).FetchAfterOneHour(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceService_FetchAfterFourHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServiceServer).FetchAfterFourHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance_service.BinanceService/FetchAfterFourHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServiceServer).FetchAfterFourHour(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// BinanceService_ServiceDesc is the grpc.ServiceDesc for BinanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binance_service.BinanceService",
	HandlerType: (*BinanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchAfterOneHour",
			Handler:    _BinanceService_FetchAfterOneHour_Handler,
		},
		{
			MethodName: "FetchAfterFourHour",
			Handler:    _BinanceService_FetchAfterFourHour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/binance.proto",
}
