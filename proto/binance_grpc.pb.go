// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/Binance.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinanceServiceClient is the client API for BinanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinanceServiceClient interface {
	FetchAfterOneHour(ctx context.Context, opts ...grpc.CallOption) (BinanceService_FetchAfterOneHourClient, error)
	FetchAfterFourHour(ctx context.Context, opts ...grpc.CallOption) (BinanceService_FetchAfterFourHourClient, error)
}

type binanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinanceServiceClient(cc grpc.ClientConnInterface) BinanceServiceClient {
	return &binanceServiceClient{cc}
}

func (c *binanceServiceClient) FetchAfterOneHour(ctx context.Context, opts ...grpc.CallOption) (BinanceService_FetchAfterOneHourClient, error) {
	stream, err := c.cc.NewStream(ctx, &BinanceService_ServiceDesc.Streams[0], "/binance_service.BinanceService/FetchAfterOneHour", opts...)
	if err != nil {
		return nil, err
	}
	x := &binanceServiceFetchAfterOneHourClient{stream}
	return x, nil
}

type BinanceService_FetchAfterOneHourClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type binanceServiceFetchAfterOneHourClient struct {
	grpc.ClientStream
}

func (x *binanceServiceFetchAfterOneHourClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *binanceServiceFetchAfterOneHourClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *binanceServiceClient) FetchAfterFourHour(ctx context.Context, opts ...grpc.CallOption) (BinanceService_FetchAfterFourHourClient, error) {
	stream, err := c.cc.NewStream(ctx, &BinanceService_ServiceDesc.Streams[1], "/binance_service.BinanceService/FetchAfterFourHour", opts...)
	if err != nil {
		return nil, err
	}
	x := &binanceServiceFetchAfterFourHourClient{stream}
	return x, nil
}

type BinanceService_FetchAfterFourHourClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type binanceServiceFetchAfterFourHourClient struct {
	grpc.ClientStream
}

func (x *binanceServiceFetchAfterFourHourClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *binanceServiceFetchAfterFourHourClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BinanceServiceServer is the server API for BinanceService service.
// All implementations must embed UnimplementedBinanceServiceServer
// for forward compatibility
type BinanceServiceServer interface {
	FetchAfterOneHour(BinanceService_FetchAfterOneHourServer) error
	FetchAfterFourHour(BinanceService_FetchAfterFourHourServer) error
	mustEmbedUnimplementedBinanceServiceServer()
}

// UnimplementedBinanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBinanceServiceServer struct {
}

func (UnimplementedBinanceServiceServer) FetchAfterOneHour(BinanceService_FetchAfterOneHourServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchAfterOneHour not implemented")
}
func (UnimplementedBinanceServiceServer) FetchAfterFourHour(BinanceService_FetchAfterFourHourServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchAfterFourHour not implemented")
}
func (UnimplementedBinanceServiceServer) mustEmbedUnimplementedBinanceServiceServer() {}

// UnsafeBinanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinanceServiceServer will
// result in compilation errors.
type UnsafeBinanceServiceServer interface {
	mustEmbedUnimplementedBinanceServiceServer()
}

func RegisterBinanceServiceServer(s grpc.ServiceRegistrar, srv BinanceServiceServer) {
	s.RegisterService(&BinanceService_ServiceDesc, srv)
}

func _BinanceService_FetchAfterOneHour_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BinanceServiceServer).FetchAfterOneHour(&binanceServiceFetchAfterOneHourServer{stream})
}

type BinanceService_FetchAfterOneHourServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type binanceServiceFetchAfterOneHourServer struct {
	grpc.ServerStream
}

func (x *binanceServiceFetchAfterOneHourServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *binanceServiceFetchAfterOneHourServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BinanceService_FetchAfterFourHour_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BinanceServiceServer).FetchAfterFourHour(&binanceServiceFetchAfterFourHourServer{stream})
}

type BinanceService_FetchAfterFourHourServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type binanceServiceFetchAfterFourHourServer struct {
	grpc.ServerStream
}

func (x *binanceServiceFetchAfterFourHourServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *binanceServiceFetchAfterFourHourServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BinanceService_ServiceDesc is the grpc.ServiceDesc for BinanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binance_service.BinanceService",
	HandlerType: (*BinanceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchAfterOneHour",
			Handler:       _BinanceService_FetchAfterOneHour_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FetchAfterFourHour",
			Handler:       _BinanceService_FetchAfterFourHour_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/Binance.proto",
}
